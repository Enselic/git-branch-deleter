name: Release

on:
  workflow_dispatch: # This workflow can only be triggered manually.

env:
  CARGO_TERM_COLOR: always

jobs:
  # Make sure regular CI passes before we make a release.
  ci:
    uses: ./.github/workflows/CI.yml

  # Publish the release to crates.io after regular CI passes.
  publish:
    needs: ci
    runs-on: ubuntu-latest
    environment:
      name: crates.io
      url: https://crates.io/crates/git-branch-deleter
    outputs:
      name: ${{ steps.step1.outputs.test }}
      PUBLISHED_VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3
      - run: cargo publish -p git-branch-deleter
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      # Figure out what tag to use.
      - name: calculate version
        id: version
        run: |
          version=$(cargo read-manifest --manifest-path git-branch-deleter/Cargo.toml | jq --raw-output .version)
          echo "VERSION=${version}" >> $GITHUB_OUTPUT
          echo "GIT_TAG=git-branch-deleter-v${version}" >> $GITHUB_OUTPUT

  # Create a tag for the published release.
  tag:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write # So we can push the git tag.
    environment:
      name: crates.io
      url: https://crates.io/crates/git-branch-deleter
    outputs:
      name: ${{ steps.step1.outputs.test }}
      version: ${{ steps.step2.outputs.test }}
    steps:
      - uses: actions/checkout@v3

      # Figure out what tag to use.
      - name: calculate version
        id: version
        run: |
          version=$(cargo read-manifest --manifest-path git-branch-deleter/Cargo.toml | jq --raw-output .version)
          echo "VERSION=${version}" >> $GITHUB_OUTPUT
          echo "GIT_TAG=git-branch-deleter-v${version}" >> $GITHUB_OUTPUT

      # Publish before we tag, since the former is much likely to unexepectedly
      # fail than the latter, but we want to keep them in sync.
      - run: cargo publish -p git-branch-deleter
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      # A release has been published. Now push a tag for it.
      - name: push tag
        run: |
          git tag ${{ steps.version.outputs.GIT_TAG }}
          git push origin ${{ steps.version.outputs.GIT_TAG }}

      # Do not create a GitHub release. That is only done for public-api and
      # cargo-public-api. A git tag is sufficient for git-branch-deleter.
